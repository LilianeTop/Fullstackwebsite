# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      #spring.datasource.url=jdbc:mysql://localhost:3306/EEdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=CET
      #SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/EEdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=CET
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: admin1966
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - app-server
      - app-client

  # Frontend Service
  app-client:
    build:
      context: frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend

    # Database Service (Mysql) where to find the root password?
    db:
      image: mysql:5.7
      ports:
        - "3306:3306"
      restart: always
      environment:
        MYSQL_DATABASE: EEdb
        MYSQL_USER: root
        MYSQL_PASSWORD: admin1966
        # MYSQL_ROOT_PASSWORD: root
      volumes:
        - db-data:/var/lib/mysql
      networks:
        - backend

  # Volumes
  volumes:
    db-data:

  # Networks to be created to facilitate communication between containers
  networks:
    backend:
    frontend: